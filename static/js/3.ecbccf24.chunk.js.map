{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateUserStatusThunk","type","value","autoFocus","onChange","e","currentTarget","ProfileInfo","profile","nameContacts","Object","keys","contacts","className","s","content","profileCover","userAvatar","src","photos","large","alt","tools","userName","fullName","about","map","n","key","aboutMe","Post","post","message","likes","maxLength","maxLengthCreator","ReduxPostForm","reduxForm","form","action","onSubmit","handleSubmit","Field","placeholder","name","id","component","TextArea","validate","required","MyPosts","posts","postData","p","title","formData","addPostOnClick","console","log","MyPostsContainer","connect","state","profilePage","dispatch","postBody","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","history","push","getProfileThunk","getUserStatusThunk","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.ecbccf24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3-wTN\",\"profileCover\":\"ProfileInfo_profileCover__1Hmyo\",\"userAvatar\":\"ProfileInfo_userAvatar__3UMQ4\",\"userName\":\"ProfileInfo_userName__3XcCB\",\"tools\":\"ProfileInfo_tools__39IW9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tA\":\"MyPosts_tA__2LMNs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__oofNq\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ProfileInfo = {\n    status: string\n    updateUserStatusThunk: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileInfo) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const activateMode = () => {\n        setEditMode(true);\n    }\n    const deactivateMode = () => {\n        setEditMode(false);\n        props.updateUserStatusThunk(status);\n    }\n    const onChange = (e:ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n\n    return (\n        <>\n\n            {!editMode &&\n\t\t\t<div>\n\t\t\t  <span onDoubleClick={activateMode}>{status || \"No status\"}</span>\n\t\t\t</div>}\n            {editMode &&\n\t\t\t<div>\n\t\t\t  <input onBlur={deactivateMode} type=\"text\"\n\t\t\t\t\t value={status}\n\t\t\t\t\t autoFocus={true}\n\t\t\t\t\t onChange={onChange}\n\t\t\t  />\n\n\t\t\t</div>}\n\n\n        </>\n    );\n}\n\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.scss\";\nimport {ContactType, ProfileType} from \"../../../redux/profileReducer\";\nimport {Preloader} from \"../../../common/preloader/preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateUserStatusThunk: (status: string) => void\n}\n\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    let nameContacts = Object.keys(props.profile.contacts);\n\n    return (\n\n        <div className={s.content}>\n            <div className={s.profileCover}>\n                <div className={s.userAvatar}><img src={props.profile.photos.large} alt=\"ava\"/></div>\n            </div>\n            <div className={s.tools}>\n                <div className={s.userName}>{props.profile.fullName}</div>\n                <ul className={s.about}>\n                    {nameContacts.map((n:string) => {\n\n                        return <li key={n}>{n}: {props.profile?.contacts[n as keyof ContactType]}</li>\n                    })}\n                </ul>\n            </div>\n            <div className=\"descr\">{props.profile.aboutMe}</div>\n            <ProfileStatusWithHooks status={props.status} updateUserStatusThunk={props.updateUserStatusThunk}/>\n        </div>\n    );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport s from \"./Post.module.scss\";\n\ntype PostPropsType = {\n    message: string,\n\tlikes: number\n    id: number\n}\n\nconst Post = (props:PostPropsType) => {\n  return (\n\t<div>\n\t  <div className={s.post}>\n\t\t<img\n\t\t  src=\"https://icdn.lenta.ru/images/2020/01/28/17/20200128170822958/square_1280_afbb21cfff8d776afb23c0d8d2a96a7c.jpg\"\n\t\t  alt=\"avatar\"\n\t\t/>\n\t\t{props.message}\n\t  </div>\n\t  <div className=\"like\">{props.likes} like</div>\n\t</div>\n  );\n};\n\nexport default Post;\n","import React, {ChangeEvent} from \"react\";\nimport s from \"./MyPosts.module.scss\";\nimport Post from \"./Post/Post\";\nimport {PostDataType} from \"../../../redux/profileReducer\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../../common/FormsControls/FormsControls\";\n\n\nexport type MapStateToPropsTypes = {\n    postData: Array<PostDataType>\n}\n\nexport type MapDispatchToPropsTypes = {\n    addPostOnClick: (postBody:string) => void\n\n}\n\nexport type OwnPropsTypes = {\n\n}\n\ntype PostDataTypePropsType = MapStateToPropsTypes & MapDispatchToPropsTypes & OwnPropsTypes\n\n\nconst MyPosts = (props: PostDataTypePropsType) => {\n    let posts = props.postData.map(p => <div key={p.id}><Post message={p.post} likes={p.likes} id={p.id}/></div>)\n\n    const onSubmit = (formData: PostFormType) => {\n        props.addPostOnClick(formData.post);\n        console.log(formData.post)\n    }\n\n    return (\n\n        <div className={s.posts}>\n            <h2 className={s.title}>My posts</h2>\n            {posts}\n           <ReduxPostForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\ntype PostFormType = {\n    post: string\n}\nconst maxLength = maxLengthCreator(10);\nconst PostForm:React.FC<InjectedFormProps<PostFormType>> = (props) => {\n    return(\n        <>\n            <form action=\"#\" onSubmit={props.handleSubmit}>\n                <Field  placeholder={\"post\"}\n                        name={\"post\"} id={\"post\"}\n                        component={TextArea}\n                        validate={[required,maxLength]}\n                />\n                <button>AddPost</button>\n            </form>\n        </>\n    );\n}\nconst ReduxPostForm = reduxForm<PostFormType>({form: \"post\"})(PostForm)\n\nexport default MyPosts;\n","import React from \"react\";\nimport {addPostActionCreator, updatePostTextActionCreator} from \"../../../redux/profileReducer\";\nimport MyPosts, {MapDispatchToPropsTypes, MapStateToPropsTypes, OwnPropsTypes} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {RootStateRedux} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\nlet mapStateToProps = (state: RootStateRedux)  => {\n    return {\n        postData: state.profilePage.postData,\n    }\n};\nlet mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPostOnClick: (postBody:string) => {\n            dispatch(addPostActionCreator(postBody))\n        },\n    }\n};\n\n\nconst MyPostsContainer = connect<MapStateToPropsTypes, MapDispatchToPropsTypes, OwnPropsTypes, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React from \"react\";\nimport s from \"./Profile.module.scss\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profileReducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateUserStatusThunk: (status: string) => void\n\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    console.log(\"rednder\")\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatusThunk={props.updateUserStatusThunk}/>\n            <MyPostsContainer/>\n        </div>\n    );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router\";\nimport {\n    getProfileThunk,\n    getUserStatusThunk,\n    ProfilePageType,\n    ProfileType,\n    updateUserStatusThunk\n} from \"../../redux/profileReducer\";\nimport {RootStateRedux} from \"../../redux/redux-store\";\nimport {compose} from \"redux\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PathParameterType = {\n    userId: string\n}\ntype mapStateToPropsType = {\n    profile: ProfileType | null\n    status:string\n    userId: number | null\n    isAuth:boolean\n}\n\ntype mapDispatchToPropsType = {\n    getProfileThunk:(userId:number)=> void\n    getUserStatusThunk:(userId:number)=> void\n    updateUserStatusThunk: (status:string)=>void\n}\ntype OwnPropsTypes = {}\n\ntype ProfileTypeProps =\n    mapStateToPropsType\n    & mapDispatchToPropsType\n    & OwnPropsTypes\n    & RouteComponentProps<PathParameterType>\n\nclass ProfileContainer extends React.Component<ProfileTypeProps, ProfilePageType> {\n\n    componentDidMount() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.userId;\n\n        } if(!userId) this.props.history.push(\"/login\")\n\n        if (typeof userId === \"number\") {\n            this.props.getProfileThunk(userId);\n            this.props.getUserStatusThunk(userId);\n        }\n    }\n\n    render() {\n        return (\n            <Profile profile={this.props.profile} status={this.props.status} updateUserStatusThunk={this.props.updateUserStatusThunk}/>\n        );\n    };\n}\n\nlet mapStateToProps = (state: RootStateRedux): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        userId: state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispatchToPropsType, OwnPropsTypes, RootStateRedux>(mapStateToProps, {getProfileThunk, getUserStatusThunk,updateUserStatusThunk}),\n    withRouter,\n)(ProfileContainer)\n"],"sourceRoot":""}